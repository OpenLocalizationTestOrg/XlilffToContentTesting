### YamlMime:ModuleUnit
uid: learn.monitor-azure-cosmos-db.5-partition-lesson
title: Identify partition strategy for your Cosmos DB data
metadata:
  title: Learn the best methods of data distribution in a NoSQL database
  description: Partition design is fundamental to scaling unstructured data collections
  ms.date: 02/08/2019
  author: natke
  ms.author: nakersha
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
  ROBOTS: NOINDEX
  ms.openlocfilehash: 6e55c02ebadb229d6996f6b235c03192ff42bf8f
  ms.sourcegitcommit: 
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 04/24/2019
  ms.locfileid: ''
durationInMinutes: 8
content: >
  [!include[](includes/5-partition-lesson.md)]
quiz:
  title: Check your knowledge
  questions:
  - content: What causes a hot partition in a distributed NoSQL database collection?
    choices:
    - content: A partition key with a large number of values
      isCorrect: false
      explanation: Partition key values with a large number of matches are distributed across partitions.
    - content: A partition key that doesn't distribute requests evenly over storage and time
      isCorrect: true
      explanation: Access that's concentrated to fewer values of the partition key can cause bottlenecks on a single partition.
    - content: A read-heavy workload
      isCorrect: false
      explanation: Requests should be evenly distributed across partitions regardless of workload type, partition key values, and access.
    - content: Querying a large volume of data
      isCorrect: false
      explanation: Requests should be evenly distributed across partitions regardless of workload type, partition key values, and access.
  - content: What is the best way to maximize the efficiency of an individual database query?
    choices:
    - content: Minimize the number of queries to the database.
      isCorrect: false
      explanation: Running fewer queries does reduce the demands on your database. But that's not practical in most operational scenarios.
    - content: Spread your write workload across partitions.
      isCorrect: false
      explanation: To use your allocated throughput efficiently, both write and query workloads should be distributed across partitions.
    - content: Design a partition key strategy so that your most frequent queries don't cross partitions.
      isCorrect: true
      explanation: Querying within a partition places far fewer demands on Cosmos DB than querying across partitions.
